{"version":3,"sources":["model/worker.ts","components/BlurContainer.tsx","components/SquareButton.tsx","Icons/check.svg","Icons/no-check.svg","components/camera/SourceSelectorItem.tsx","Icons/gear.svg","components/camera/SourceSelector.tsx","components/camera/Camera.tsx","components/prediction/PredictionEntry.tsx","components/prediction/Prediction.tsx","Icons/gallery.svg","components/staticImage/ImageSelectorButton.tsx","Icons/close.svg","components/staticImage/ImageCloseButton.tsx","components/staticImage/StaticImage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","BlurContainer","additionalClassname","children","className","SquareButton","onClick","setHover","undefined","onMouseEnter","onMouseLeave","SourceSelectorItem","selected","onSelect","src","check","noCheck","alt","SourceSelector","devices","deviceId","setDeviceId","imageFlip","setImageFlip","selectorVisible","setSelectorVisible","useState","hovering","id","e","stopPropagation","gear","map","device","key","label","replace","Camera","predictCanvas","predictions","setDevices","webcamRef","useRef","handleDevices","useCallback","mediaDevices","videoDevices","filter","kind","length","useEffect","navigator","enumerateDevices","then","getCanvas","a","current","newImage","sleep","ms","Promise","resolve","reject","setTimeout","canvas","currentCanvas","ref","screenshotFormat","forceScreenshotSourceSize","screenshotQuality","audio","videoConstraints","width","ideal","height","exact","mirrored","PredictionEntry","confidence","top","style","toString","Prediction","sortedPredictions","Object","entries","sort","b","slice","idx","ImageSelectorButton","setImageFile","imageFile","fileInput","value","click","gallery","type","accept","onChange","files","target","display","ImageCloseButton","close","StaticImage","image","reader","FileReader","onload","img","Image","ctx","getContext","drawImage","result","backgroundImage","readAsDataURL","modelWorker","ModelWorker","loadModel","App","setPredictions","imageData","getImageData","predict","results","Confidences","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39c64177.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"loadModel\",\"disposeModel\",\"predict\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"fb48c026e6dbd3b98e94.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React, {FunctionComponent} from \"react\";\nimport './BlurContainer.css';\n\ntype BlurContainerType = {\n    additionalClassname?: string\n}\n\nconst BlurContainer: FunctionComponent<BlurContainerType> = ({ additionalClassname, children }) => {\n    // simple container with rounded corners and a blurred translucent background\n    let className = \"blur-container\";\n    if (!!additionalClassname) {\n        className = className + ` ${additionalClassname}`;\n    }\n    return (\n        <div className={className}>\n            { children }\n        </div>\n    );\n}\n\nexport default BlurContainer;\n","import React, {FunctionComponent} from \"react\";\nimport BlurContainer from \"./BlurContainer\";\nimport \"./SquareButton.css\";\n\ntype SquareButtonProps = {\n    onClick?: () => void,\n    setHover?: (hovering: boolean) => void\n};\n\nconst SquareButton: FunctionComponent<SquareButtonProps> = ({ onClick, setHover, children }) => {\n    // Square button that is inside the blur container\n    return (\n        <div\n            onClick={onClick ? () => onClick() : undefined}\n            onMouseEnter={setHover ? () => setHover(true) : undefined}\n            onMouseLeave={setHover ? () => setHover(false) : undefined}\n        >\n            <BlurContainer additionalClassname=\"square-button\">\n                { children }\n            </BlurContainer>\n        </div>\n\n    );\n}\n\nexport default SquareButton;\n","export default __webpack_public_path__ + \"static/media/check.06c31cf8.svg\";","export default __webpack_public_path__ + \"static/media/no-check.fe894ae6.svg\";","import React from \"react\";\nimport check from \"../../Icons/check.svg\";\nimport noCheck from \"../../Icons/no-check.svg\";\n\nimport \"./SourceSelectorItem.css\";\n\n\ntype SourceSelectorItemProps = {\n    name: string,\n    selected: boolean,\n    onSelect: () => void\n}\n\n// Component for selecting the webcam source and flipping the image horizontally\nfunction SourceSelectorItem({selected, onSelect, name}: SourceSelectorItemProps) {\n\n    return (\n        <div key={name} className=\"source-item-container\" >\n            <div className={`source-device${(selected) ? \" source-selected\" : \"\"}`}>\n                {name}\n            </div>\n            <div onClick={() => onSelect()} className=\"source-radio-button\">\n                <img src={selected ? check : noCheck} alt={'Select device'} />\n            </div>\n        </div>\n    )\n}\n\nexport default SourceSelectorItem;\n","export default __webpack_public_path__ + \"static/media/gear.b1f1407e.svg\";","import React, {useState} from \"react\";\nimport SquareButton from \"../SquareButton\";\nimport BlurContainer from \"../BlurContainer\";\nimport SourceSelectorItem from \"./SourceSelectorItem\";\nimport gear from \"../../Icons/gear.svg\";\n\nimport \"./SourceSelector.css\";\nimport check from \"../../Icons/check.svg\";\nimport noCheck from \"../../Icons/no-check.svg\";\n\n\ntype SourceSelectorProps = {\n    devices: MediaDeviceInfo[]\n    deviceId?: string,\n    setDeviceId: (deviceId: string) => void,\n    imageFlip: boolean,\n    setImageFlip: (imageFlip: boolean) => void,\n    selectorVisible: boolean,\n    setSelectorVisible: (visible: boolean) => void\n}\n\n// Component for selecting the webcam source and flipping the image horizontally\nfunction SourceSelector({devices, deviceId, setDeviceId, imageFlip, setImageFlip, selectorVisible, setSelectorVisible}: SourceSelectorProps) {\n    const [hovering, setHover] = useState(false);\n\n    return (\n        <div\n            id=\"camera-select-button\"\n            onClick={(e) => e.stopPropagation()}\n            onMouseLeave={() => {setSelectorVisible(false)}}\n        >\n            <SquareButton setHover={(hovering) => {setHover(hovering); if (hovering) setSelectorVisible(true);}}>\n                <img id=\"gear-icon\" src={gear} alt={\"Gear Icon\"} className={selectorVisible || hovering ? \"gear-rotated\" : undefined} />\n            </SquareButton>\n            <BlurContainer additionalClassname={`source-selector${selectorVisible ? \" source-expanded\" : \"\"}`}>\n                {devices.map((device, key) => (\n                    <SourceSelectorItem\n                        name={!!device.label ? device.label.replace(/\\(.*\\)/g, '') : `Device ${key + 1}`}\n                        onSelect={() => setDeviceId(device.deviceId)}\n                        selected={device.deviceId === deviceId}\n                        key={device.deviceId}\n                    />\n                ))}\n                <div className=\"toggle-container\">\n                    <div className=\"toggle-item-container\">\n                        <div className={`toggle-item source-device${(imageFlip) ? \" source-selected\" : \"\"}`}>\n                            {\"Flip Image\"}\n                        </div>\n                        <div onClick={() => setImageFlip(!imageFlip)} className=\"toggle-radio-button\">\n                            <img src={imageFlip ? check : noCheck} alt={'Flip Webcam Button'} />\n                        </div>\n                    </div>\n                </div>\n            </BlurContainer>\n        </div>\n    )\n}\n\nexport default SourceSelector;\n","import React, {useEffect, useState, useRef, useCallback} from \"react\";\nimport Webcam from \"react-webcam\";\nimport SourceSelector from \"./SourceSelector\";\nimport \"./Camera.css\";\n\ntype CameraProps = {\n    predictCanvas: (canvas: HTMLCanvasElement) => void;\n    predictions?: { [label: string]: number };\n}\n\n// Our webcam display and capture component\nfunction Camera({ predictCanvas, predictions }: CameraProps) {\n    const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\n    const [deviceId, setDeviceId] = useState<string | undefined>(undefined);\n    const [imageFlip, setImageFlip] = useState(true);\n    const webcamRef = useRef<Webcam>(null);\n    const [selectorVisible, setSelectorVisible] = useState(false);\n\n    // handle any webcam plugged into the computer\n    // https://github.com/mozmorris/react-webcam#show-all-cameras-by-deviceid\n    const handleDevices = useCallback(\n        (mediaDevices: MediaDeviceInfo[]) => {\n            // find all the webcams\n            const videoDevices = mediaDevices.filter(({kind}) => kind === \"videoinput\");\n            setDevices(videoDevices);\n            // set our initial webcam to be the first in the list\n            if (videoDevices.length > 0) {\n                setDeviceId(videoDevices[0].deviceId);\n            }\n        },[setDevices, setDeviceId]\n    );\n    useEffect(() => {\n        navigator.mediaDevices.enumerateDevices().then(handleDevices);\n    }, [handleDevices]);\n\n    // function to grab the current frame drawn on canvas from the webcam\n    const getCanvas: () => Promise<HTMLCanvasElement | undefined> = useCallback(async () => {\n        let newImage;\n        if (webcamRef.current) {\n            newImage = webcamRef.current.getCanvas();\n            if (newImage) {\n                return newImage;\n            }\n        }\n    }, [webcamRef]);\n\n    // helper for waiting in our loop when the camera is loading (getting the image)\n    const sleep = useCallback((ms: number) => {\n        return new Promise<NodeJS.Timeout>(function (resolve, reject) {\n            setTimeout(resolve, ms);\n        });\n    }, []);\n\n    // while we have the webcam mounted, predict frames as fast as we get new predictions back from the model\n    useEffect(() => {\n        getCanvas().then(async (canvas: HTMLCanvasElement | undefined) => {\n            let currentCanvas = canvas;\n            while (!currentCanvas) {\n                // if no canvas, wait 500ms and try again\n                await sleep(500);\n                currentCanvas = await getCanvas();\n            }\n            if (currentCanvas) {\n                predictCanvas(currentCanvas);\n            }\n        })\n    }, [sleep, predictions, deviceId, getCanvas, predictCanvas])\n\n    return (\n        <div id=\"video-container\" onClick={() => setSelectorVisible(false)}>\n            <SourceSelector\n                devices={devices}\n                deviceId={deviceId}\n                setDeviceId={setDeviceId}\n                imageFlip={imageFlip}\n                setImageFlip={setImageFlip}\n                selectorVisible={selectorVisible}\n                setSelectorVisible={setSelectorVisible}\n            />\n            <Webcam\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                forceScreenshotSourceSize={true}\n                screenshotQuality={1}\n                audio={false}\n                videoConstraints={{\n                    width: {ideal: 1920},\n                    height: {ideal: 1080},\n                    deviceId: !!deviceId ? {exact: deviceId} : undefined\n                }}\n                mirrored={imageFlip}\n            />\n        </div>\n    );\n}\n\nexport default Camera;\n","import React from \"react\";\nimport \"./PredictionEntry.css\";\n\ntype PredictionEntryProps = {\n    label: string\n    confidence?: number\n    top?: boolean\n}\n\nfunction PredictionEntry({label, confidence, top}: PredictionEntryProps) {\n    // render the predicted label and a bar representing the confidence value\n    // make the top confidence value green\n    return (\n        <div key={label} className=\"prediction-entry\">\n            {label}\n            {!!confidence ?\n                <div\n                    className={\"prediction-bar\" + (top ? \" prediction-green\" : \"\")}\n                    style={{width: (confidence*100).toString() + \"%\"}}\n                />\n            : null}\n        </div>\n    );\n}\n\nexport default PredictionEntry;\n","import React from \"react\";\nimport BlurContainer from \"../BlurContainer\";\nimport PredictionEntry from \"./PredictionEntry\";\nimport \"./Prediction.css\";\n\ntype PredictionProps = {\n    predictions?: { [label: string]: number },\n    top?: number\n}\n\nfunction Prediction({predictions, top=3}: PredictionProps) {\n    // display the top N (default 3) predictions returned from the model\n    let sortedPredictions: Array<[string, number]> | undefined;\n    if (!!predictions) {\n        // sort our predictions by the confidence value and take the top N\n        sortedPredictions = Object.entries(predictions)\n            .sort((a, b) => b[1] - a[1])\n            .slice(0, top);\n    }\n    return (\n        <div id=\"predictions\">\n            <BlurContainer additionalClassname=\"prediction-container\">\n                {!!sortedPredictions ?\n                    sortedPredictions.map(([label, confidence], idx) => (\n                        <PredictionEntry key={label} label={label} confidence={confidence} top={idx===0} />\n                    ))\n                    : <PredictionEntry label={'Loading...'} />\n                }\n            </BlurContainer>\n        </div>\n    );\n}\n\nexport default Prediction;\n","export default __webpack_public_path__ + \"static/media/gallery.45752e9c.svg\";","import React, {useEffect, useRef} from \"react\";\nimport SquareButton from \"../SquareButton\";\nimport gallery from \"../../Icons/gallery.svg\";\n\nimport \"./ImageSelectorButton.css\";\n\ntype ImageSelectorButtonProps = {\n    setImageFile: (image: File | null) => void;\n    imageFile: File | null;\n};\n\n// Component for selecting an image file for prediction\nfunction ImageSelectorButton({setImageFile, imageFile}: ImageSelectorButtonProps) {\n    // ref to the hidden file input element\n    const fileInput = useRef<HTMLInputElement>(null);\n\n    // if we have a null file (from clearing the image), clear the file input value\n    useEffect(\n        () => {\n            if (!imageFile && fileInput.current) {\n                fileInput.current.value = \"\";\n            }\n        },\n        [imageFile, fileInput]\n    )\n\n    // make an onclick that will open the file dialog\n    const onClick = () => {\n        if (fileInput.current) {\n            fileInput.current.click();\n        }\n    }\n\n    // set our image file from the picker\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if (files && files.length > 0) {\n            setImageFile(files[0]);\n        }\n    }\n\n    return (\n        <div\n            id=\"image-select-button\"\n            onClick={onClick}\n        >\n            <SquareButton>\n                <img id=\"gallery-icon\" src={gallery} alt={\"File Selector\"} />\n            </SquareButton>\n            <input ref={fileInput} type=\"file\" accept=\"image/*\" onChange={onChange} style={{display: \"none\"}} />\n        </div>\n    )\n}\n\nexport default ImageSelectorButton;\n","export default __webpack_public_path__ + \"static/media/close.b502d4ba.svg\";","import React from \"react\";\nimport SquareButton from \"../SquareButton\";\nimport close from \"../../Icons/close.svg\";\n\nimport \"./ImageCloseButton.css\";\n\ntype ImageCloseButtonProps = {\n    setImageFile: (image: File | null) => void;\n};\n\n// Component for clearing the static image and going back to the webcam view\nfunction ImageCloseButton({setImageFile}: ImageCloseButtonProps) {\n    \n    const onClick = () => {\n        setImageFile(null);\n    };\n\n    return (\n        <div id=\"image-close-button\">\n            <SquareButton onClick={onClick}>\n                <img id=\"close-icon\" src={close} alt={\"Close\"} />\n            </SquareButton>\n        </div>\n    )\n}\n\nexport default ImageCloseButton;\n","import React, {useEffect, useRef} from \"react\";\nimport ImageCloseButton from \"./ImageCloseButton\";\n\nimport \"./StaticImage.css\";\n\ntype StaticImageProps = {\n    predictCanvas: (canvas: HTMLCanvasElement) => void;\n    image: File;\n    setImageFile: (image: File | null) => void;\n}\n\n// Component for displaying our selected image file for prediction\nfunction StaticImage({ predictCanvas, image, setImageFile }: StaticImageProps) {\n    // display our image file on a canvas and call the predict function with that canvas\n    const canvas = useRef<HTMLCanvasElement>(null);\n    const display = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            // make an image to draw on the canvas\n            const img = new Image();\n            img.onload = () => {\n                if (canvas.current) {\n                    // draw the image on our canvas\n                    canvas.current.width = img.width;\n                    canvas.current.height = img.height;\n                    const ctx = canvas.current.getContext(\"2d\");\n                    if (!!ctx) {\n                        // draw our image on the context\n                        ctx.drawImage(img,0,0);\n                        // drawing is finished, run the prediction!\n                        predictCanvas(canvas.current);\n                    }\n                }\n            }\n\n            // load the image from our reader\n            if (e.target) {\n                img.src = e.target.result as string;\n                if (display.current) {\n                    display.current.style.backgroundImage = `url(${e.target.result})`;\n                }\n            }\n        }\n        // read our image file and process it!\n        reader.readAsDataURL(image);\n    }, [image, predictCanvas, display]);\n\n    return (\n        <div id=\"static-image\" ref={display}>\n            <ImageCloseButton setImageFile={setImageFile} />\n            <canvas ref={canvas} style={{display: \"none\"}} />\n        </div>\n    )\n}\n\nexport default StaticImage;\n","import React, {useCallback, useState} from 'react';\nimport Camera from './camera/Camera';\nimport Prediction from './prediction/Prediction';\nimport ImageSelectorButton from './staticImage/ImageSelectorButton';\nimport StaticImage from './staticImage/StaticImage';\n\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport ModelWorker from \"workerize-loader!../model/worker\";\n\n// create our web worker instance for running the tfjs model without blocking the UI thread\nconst modelWorker = ModelWorker();\n// the filepaths to our exported signature.json and model.json files (in the public/model folder)\nconst signatureFile = process.env.PUBLIC_URL + `/model/signature.json`;\nconst modelFile = process.env.PUBLIC_URL + `/model/model.json`;\n// load our model in the web worker\nmodelWorker.loadModel(signatureFile, modelFile);\n\n\nfunction App() {\n    // state for keeping track of our predictions -- map of {label: confidence} from running the model on an image\n    const [predictions, setPredictions] = useState<{[key: string]: number} | undefined>(undefined);\n    // state for using a static image from file picker\n    const [imageFile, setImageFile] = useState<File | null>(null);\n\n    // function to run the image from an html canvas element through our model\n    const predictCanvas = useCallback((canvas: HTMLCanvasElement) => {\n        // get the canvas context\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n            // get the pixel data from the full canvas\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            // run the async predict function and set the values to our state\n            modelWorker.predict(imageData).then((results: {Confidences: {[label: string]: number}}) => {\n                if (results) {\n                    setPredictions(results.Confidences);\n                }\n            });\n        }\n    }, []);\n\n    return (\n        <div>\n            <ImageSelectorButton setImageFile={setImageFile} imageFile={imageFile} />\n            {\n                !imageFile ? \n                <Camera predictCanvas={predictCanvas} predictions={predictions} /> :\n                <StaticImage predictCanvas={predictCanvas} image={imageFile} setImageFile={setImageFile} />\n            }\n            <Prediction predictions={predictions}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}